syntax = "proto3";



// Service definition
service RaftService {
    rpc login(LoginRequest) returns (LoginResponse);
    rpc logout(LogoutRequest) returns (LogoutResponse);
    rpc uploadFile(UploadRequest) returns (UploadResponse);  // Upload file
    rpc downloadFile(DownloadRequest) returns (DownloadResponse);  // Download file
    rpc getAssignments(GetRequest) returns (GetResponse);  // Get list of assignments
    rpc askQuery(QueryRequest) returns (QueryResponse);  // Ask a query to instructor
    rpc getQueries(QueryListRequest) returns (QueryListResponse);  // Instructor gets all student queries
    rpc replyQuery(ReplyQueryRequest) returns (ReplyQueryResponse);  // Instructor replies to a query
    rpc gptQuery(GPTQueryRequest) returns (GPTQueryResponse);


    rpc RequestVote (RequestVoteRequest) returns (RequestVoteResponse) {};
    rpc AppendEntries (AppendEntriesRequest) returns (AppendEntriesResponse) {};
    rpc GetLeader (Empty) returns (GetLeaderResponse) {};
    rpc Suspend (SuspendRequest) returns (Empty) {};
    rpc SetVal (SetValRequest) returns (SetValResponse) {};
    rpc GetVal (GetValRequest) returns (GetValResponse) {};
    rpc SendSome(sendsomethingproto) returns (sendresponse){};
    rpc getsome (getrajivRequest) returns (getrajivResponse) {};
    rpc nonsenseservice(nonsenserequest) returns (nonsenseresponse) {};

    

    rpc SendSome1(sendsomethingproto1) returns (sendresponse1){};
    rpc getsome1 (getrajivRequest1) returns (getrajivResponse1) {};
    

}




// Login request and response
message LoginRequest {
    string username = 1;
    string password = 2;
}

message LoginResponse {
    string status = 1;
    string token = 2;
}

// File upload and download requests
message UploadRequest {
    string token = 1;
    string filename = 2;
    bytes content = 3;  // File content sent in chunks
}

message UploadResponse {
    string status = 1;
}

message DownloadRequest {
    string token = 1;
    string filename = 2;  // Name of the file to download
}

message DownloadResponse {
    string status = 1;
    bytes content = 2;  // File content sent in chunks
}

// Get requests for assignments list
message GetRequest {
    string token = 1;
    string type = 2;  // 'student' or 'instructor'
}

message GetResponse {
    string status = 1;
    repeated string assignments = 2;  // List of assignment filenames with student names if instructor
}

// Query requests and responses
message QueryRequest {
    string token = 1;
    string query = 2;
}

message QueryResponse {
    string status = 1;
    string reply = 2;
}

message QueryListRequest {
    string token = 1;
}

message QueryListResponse {
    string status = 1;
    repeated string queries = 2; // List of queries with format: "student: query"
}

message ReplyQueryRequest {
    string token = 1;
    string student = 2;
    string reply = 3;
}

message ReplyQueryResponse {
    string status = 1;
}

message LogoutRequest {
    string token = 1;
}

message LogoutResponse {
    string status = 1;
}

message GPTQueryRequest {
    string token = 1;
    string query = 2;
}

message GPTQueryResponse {
    string status = 1;
    string response = 2;
}




message TermCandIDPair {
    int32 term = 1;
    int32 candidateID = 2;
}

message RequestVoteRequest {
    TermCandIDPair candidate = 1;
    int32 lastLogIndex = 2;
    int32 lastLogTerm = 3;
}

message TermResultPair {
    int32 term = 1;
    bool verdict = 2;
}

message RequestVoteResponse {
    TermResultPair result = 1;
}

message TermLeaderIDPair {
    int32 term = 1;
    int32 leaderID = 2;
}

// TODO Ask ahmad about appropriate type of command
message LogEntry {
    int32 term = 1;
    string command = 2;
}

message AppendEntriesRequest {
    TermLeaderIDPair leader = 1;
    int32 prevLogIndex = 2;
    int32 prevLogTerm = 3;
    repeated LogEntry entries = 4;
    int32 leaderCommit = 5;
}

message AppendEntriesResponse {
    TermResultPair result = 1;
}

message Empty {}

message GetLeaderResponse {
    int32 nodeId = 1;
    string nodeAddress = 2;
}

message SuspendRequest {
    int32 period = 1;
}

message SetValRequest {
    string key = 1;
    string value = 2;
}

message SetValResponse {
    bool verdict = 1;
}

message GetValRequest {
    string key = 1;
}

message GetValResponse {
    bool verdict = 1;
    string value = 2;
}

// from here nonsense do not try to understand use GetLeaderResponse

message sendsomethingproto{
    string key = 1;
    string value = 2;
}

message sendresponse {
    bool verdict = 1;
}

message getrajivRequest {
    string key = 1;
}

message getrajivResponse {
    bool verdict = 1;
    string value = 2;
}

message nonsenserequest
{
    string key = 1;
    bytes value = 2;  // Use bytes to send binary file data
}

message nonsenseresponse {
    bool verdict = 1;
}






message sendsomethingproto1{
    string key = 1;
    string value = 2;
}

message sendresponse1 {
    bool verdict = 1;
}


message getrajivRequest1 {
    string key = 1;
}

message getrajivResponse1 {
    bool verdict = 1;
    string value = 2;
}